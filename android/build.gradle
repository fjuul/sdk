// Top-level build file where you can add configuration options common to all sub-projects/modules.
plugins {
    id 'com.android.application' version '8.8.2' apply false
    id 'com.android.library' version '8.8.2' apply false
    id "com.diffplug.gradle.spotless" version "6.25.0" apply false
}

ext {
    compileSdk = 35
    minSdk = 26
    targetSdk = 35

    okHttpVersion = '4.12.0'
    retrofitVersion = '2.9.0'
    androidXAnnotationVersion = '1.7.1'
    androidXCoreVersion = '1.15.0'
    robolectricVersion = '4.13'
    androidXTestCoreVersion = '1.6.1'
    junitVersion = '4.13.2'
}

subprojects {
    apply plugin: 'com.diffplug.spotless'
    spotless {
        java {
            target fileTree('.') {
                // exclude generated source files
                include 'src/**/*.java'
            }
            // licenseHeaderFile project.rootProject.file('spotless/copyright.java')

            // optional: you can specify a specific version and/or config file
            eclipse('4.13').configFile("$project.rootProject.projectDir/eclipse-java-google-style.xml")
            removeUnusedImports()
            trimTrailingWhitespace()
            importOrder 'java', 'javax', 'org', 'com', 'com.diffplug', ''    // A sequence of package names
        }
        groovyGradle {
            target fileTree('.') {
                include '**/*.gradle'
            }
            greclipse()
            indentWithSpaces(4)
        }

        // only for the example application
        kotlin {
            target fileTree('./ExampleApp') {
                include '**/*.kt'
            }
            // version and editorConfigOverride are both optional
            // NOTE: keep synced with editorconfig!
            def styles = [
                indent_size               : '4',
                indent_style              : 'space',
                'continuation_indent_size': '2',
                'insert_final_newline'    : 'true',
                trim_trailing_whitespace  : 'true',
                end_of_line               : 'lf'
            ]
            ktlint('1.1.1').editorConfigOverride(styles)
        }

        spotlessJava.dependsOn 'spotlessGroovyGradle'
        spotlessKotlin.dependsOn 'spotlessGroovyGradle'
        spotlessKotlin.dependsOn 'spotlessJava'

    }
}

configure(subprojects) {
    apply plugin: 'com.android.library'
    android {
        lintOptions {
            enable 'Interoperability'
            // Interoperability issues
            error 'UnknownNullness', 'NoHardKeywords', 'LambdaLast', 'KotlinPropertyAccess'
            explainIssues true
            textReport true
            xmlReport System.getenv("CI") != "true"
            htmlReport System.getenv("CI") != "true"
        }
    }
}

allprojects {
    tasks.withType(Test) {
        testLogging {
            exceptionFormat "full"
            showCauses true
            showExceptions true
            showStackTraces true
            showStandardStreams true
            events = [
                "passed",
                "skipped",
                "failed",
                "standardOut"
            ]
        }
    }
}
